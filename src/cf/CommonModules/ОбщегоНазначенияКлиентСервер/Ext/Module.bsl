
&НаСервере
Процедура УстановитьУсловноеОформление(ЭлементыУО, МассивИменКолонокДляПодсветки, БелСтруктура, ЗелСтруктура, КрСтруктура)  

	ЭлементОформления = ЭлементыУО.Добавить(); 
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Белый); 
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(БелСтруктура.ЛевоеЗначение); 
	ЭлементОтбора.ВидСравнения = БелСтруктура.ВидСравнения;
	ЭлементОтбора.ПравоеЗначение = БелСтруктура.ПравоеЗначение;  
	
	
	ЭлементОформления = ЭлементыУО.Добавить(); 
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.БледноКрасноФиолетовый); 
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(КрСтруктура.ЛевоеЗначение); 
	ЭлементОтбора.ВидСравнения = КрСтруктура.ВидСравнения;
	ЭлементОтбора.ПравоеЗначение = КрСтруктура.ПравоеЗначение;  
	
	Для каждого Строка из МассивИменКолонокДляПодсветки Цикл
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(Строка); 
		ПолеОформления.Использование = Истина;
	КонецЦикла;
	
	ЭлементОформления = ЭлементыУО.Добавить(); 
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.БледноЗеленый); 
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЗелСтруктура.ЛевоеЗначение); 
	ЭлементОтбора.ВидСравнения = ЗелСтруктура.ВидСравнения;
	ЭлементОтбора.ПравоеЗначение = ЗелСтруктура.ПравоеЗначение;
	
	Для каждого Строка из МассивИменКолонокДляПодсветки Цикл
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(Строка); 
		ПолеОформления.Использование = Истина;
	КонецЦикла; 
		
КонецПроцедуры	


&НаСервере
Процедура ПолучитьОбъект(ЭлементыУО, ИмяОбъекта, СписокКолонок) Экспорт
	
	
	МассивСоставаОбъекта = СтрРазделить(ИмяОбъекта, "."); 
	КолЭлементов = МассивСоставаОбъекта.Количество();
	
	Если КолЭлементов = 4 и МассивСоставаОбъекта[2] = "Форма" Тогда
		
	Индекс =  МассивДопустимыхМетаданных().Количество() - 1;	
	НайденноеЗначение = Неопределено;	
	
	СтруктураПараметров = Новый Структура("ЭлементыУО, МассивСоставаОбъекта, СписокКолонок", ЭлементыУО, МассивСоставаОбъекта, СписокКолонок);
	//ВыполнитьУсловноеОформление = СоответствиеОбъектаМетаданных(СтруктураПараметров).Получить(МассивСоставаОбъекта[0]);
	ВыполнитьУсловноеОформление = ОпределитьУО(СтруктураПараметров);
	КонецЕсли; 
	
КонецПроцедуры	

&НаСервере
Функция МассивДопустимыхМетаданных()  
	
	Массив = Новый Массив;
	Массив.Добавить("Документ");
	Массив.Добавить("Справочник");
	Массив.Добавить("Обработка"); 
	
	Возврат Массив; 
	
КонецФункции

&НаСервере
Функция СтруктураУОДокумент(СтруктураПараметров)
	
	МассивИменКолонокДляПодсветки = Новый Массив;
	Для каждого Стр из СтруктураПараметров.СписокКолонок Цикл
		МассивИменКолонокДляПодсветки.Добавить(Стр.Имя);
	КонецЦикла; 
		
	Если СтруктураПараметров.МассивСоставаОбъекта[1] = "СхемаЛеченияКонкретногоПациента" Тогда
    	 
		БелСтруктура = Новый Структура;
		БелСтруктура.Вставить("ЛевоеЗначение", "Список.РезультатЛечения");
		БелСтруктура.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		БелСтруктура.Вставить("ПравоеЗначение", Перечисления.РезультатЛечения.ЛечениеНеЗакончено); 
		
		ЗелСтруктура = Новый Структура;
		ЗелСтруктура.Вставить("ЛевоеЗначение", "Список.РезультатЛечения");
		ЗелСтруктура.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		ЗелСтруктура.Вставить("ПравоеЗначение", Перечисления.РезультатЛечения.Эффективное); 
		
		КрСтруктура = Новый Структура;
		КрСтруктура.Вставить("ЛевоеЗначение", "Список.РезультатЛечения");
		КрСтруктура.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		КрСтруктура.Вставить("ПравоеЗначение", Перечисления.РезультатЛечения.Неэффективное); 
		
		УстановитьУсловноеОформление(СтруктураПараметров.ЭлементыУО, МассивИменКолонокДляПодсветки, БелСтруктура, ЗелСтруктура, КрСтруктура);

	ИначеЕсли СтруктураПараметров.МассивСоставаОбъекта[1] = "ДобавлениеАналогов" Тогда
		
		БелСтруктура = Новый Структура;
		БелСтруктура.Вставить("ЛевоеЗначение", "Объект.СписокАналогов.ЕстьОшибка");
		БелСтруктура.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		БелСтруктура.Вставить("ПравоеЗначение", 0); 
		
		ЗелСтруктура = Новый Структура;
		ЗелСтруктура.Вставить("ЛевоеЗначение", "Объект.СписокАналогов.ЕстьОшибка");
		ЗелСтруктура.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		ЗелСтруктура.Вставить("ПравоеЗначение", 2); 
		
		КрСтруктура = Новый Структура;
		КрСтруктура.Вставить("ЛевоеЗначение", "Объект.СписокАналогов.ЕстьОшибка");
		КрСтруктура.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		КрСтруктура.Вставить("ПравоеЗначение", 1); 
		
		УстановитьУсловноеОформление(СтруктураПараметров.ЭлементыУО, МассивИменКолонокДляПодсветки, БелСтруктура, ЗелСтруктура, КрСтруктура);
		
	КонецЕсли	
	
КонецФункции

&НаСервере
Функция СтруктураУОСправочник(СтруктураПараметров)
	
	//Сообщить("Успех спр!");
	
КонецФункции

&НаСервере
Функция СтруктураУООбработка(СтруктураПараметров)
	
	//Сообщить("Успех спр!");
	
КонецФункции

&НаСервере
Функция ОпределитьУО(СтруктураПараметров)

	СтруктураУО = СтрШаблон("СтруктураУО%1(СтруктураПараметров)", СтруктураПараметров.МассивСоставаОбъекта[0]); 
	Возврат Вычислить(СтруктураУО); 
	
КонецФункции	

//&НаСервере
//Функция СоответствиеОбъектаМетаданных(СтруктураПараметров)
//	
//	НаименованиеОбъекта = СтруктураПараметров.МассивСоставаОбъекта[0];
//	Соответствие = Новый Соответствие;
//	
//	Если НаименованиеОбъекта = "Документ" Тогда
//		Соответствие.Вставить("Документ", СтруктураУОДокумента(СтруктураПараметров));
//	ИначеЕсли НаименованиеОбъекта = "Справочник" Тогда
//		Соответствие.Вставить("Справочник", СтруктураУОСправочника(СтруктураПараметров));
//	ИначеЕсли НаименованиеОбъекта = "Обработка" Тогда
//		Соответствие.Вставить("Обработка", СтруктураУООбработки(СтруктураПараметров));	
//	КонецЕсли;	
//	
//	Возврат Соответствие;
//	
//КонецФункции	